{
    "tasks": [
        {
            "profileName": "OpenGL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "glcore",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "glcore"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGL",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "extensionsNamespace": "Silk.NET.OpenGL.Extensions",
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGL (Compatibility Profile)",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGL.Legacy",
            "extensionsNamespace": "Silk.NET.OpenGL.Legacy.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenGLES",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/gl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "gles2",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "GL"
            },
            "prefix": "gl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "gles2"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "rename": {
                "Buffer": "BufferKind"
            },
            "exclude": [
                "Boolean"
            ],
            "namespace": "Silk.NET.OpenGLES",
            "extensionsNamespace": "Silk.NET.OpenGLES.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "glBinormalPointerEXT",
                    "glColorPointer",
                    "glColorPointerEXT",
                    "glEdgeFlagPointer",
                    "glFogCoordPointer",
                    "glFogCoordPointerEXT",
                    "glIndexPointer",
                    "glIndexPointerEXT",
                    "glInterleavedArrays",
                    "glMatrixIndexPointerARB",
                    "glMatrixIndexPointerOES",
                    "glNormalPointer",
                    "glNormalPointerEXT",
                    "glPointSizePointerOES",
                    "glSecondaryColorPointer",
                    "glSecondaryColorPointerEXT",
                    "glTangentPointerEXT",
                    "glTexCoordPointer",
                    "glTexCoordPointerEXT",
                    "glTexCoordPointer",
                    "glVariantPointerEXT",
                    "glVertexAttribIPointer",
                    "glVertexAttribIPointerEXT",
                    "glVertexAttribLPointer",
                    "glVertexAttribLPointerEXT",
                    "glVertexAttribPointer",
                    "glVertexAttribPointerARB",
                    "glVertexAttribPointerNV",
                    "glVertexPointer",
                    "glVertexPointerEXT",
                    "glVertexWeightPointerEXT",
                    "glWeightPointerARB",
                    "glWeightPointerOES",
                    "glElementPointerAPPLE",
                    "glElementPointerATI",
                    "glMultiTexCoordPointerEXT",
                    "glPointSizePointerOES"
                ]
            },
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenCL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenCL-Docs/main/xml/cl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "cl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "cl",
                "constructor": "cl",
                "className": "CL"
            },
            "prefix": "cl",
            "clang": {},
            "rename": {
                "cl_kernel_arg_type_qualifer": "cl_kernel_arg_type_qualifier",
                "ck_khr_mipmap_image": "cl_khr_mipmap_image",
                "CL_DRIVER_VERSION": "CL_DEVICE_DRIVER_VERSION",
                "CL_DRIVER_UUID_KHR": "CL_DEVICE_DRIVER_UUID_KHR",
                "CL_PRINTF_CALLBACK_ARM": "CL_CONTEXT_PRINTF_CALLBACK_ARM",
                "CL_PRINTF_BUFFERSIZE_ARM": "CL_CONTEXT_PRINTF_BUFFERSIZE_ARM"
            },
            "bakery": {
                "profileNames": [
                    "opencl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenCL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.OpenCL",
            "extensionsNamespace": "Silk.NET.OpenCL.Extensions",
            "nameContainer": {
                "linux-x64": "libOpenCL.so.1",
                "win-x64": "opencl.dll",
                "win-x86": "opencl.dll",
                "osx-x64": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "android": "libOpenCL.so",
                "iOS": "/System/Library/Frameworks/OpenCL.framework/OpenCL",
                "className": "OpenCLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "char": "byte",
                    "ID3D10Buffer*": "void*",
                    "ID3D10Texture2D*": "void*",
                    "ID3D10Texture3D*": "void*",
                    "ID3D11Buffer*": "void*",
                    "ID3D11Texture2D*": "void*",
                    "ID3D11Texture3D*": "void*",
                    "ID3D11Device*": "void*",
                    "ID3D12Device*": "void*",
                    "ID3D12Resource*": "void*",
                    "ID3D12CommandQueue*": "void*",
                    "IDirect3DSurface9*": "void*",
                    "DXGI_FORMAT": "uint",
                    "VAImageFormat*": "void*",
                    "D3DFORMAT": "uint"
                },
                {
                    "cl_icd_dispatch": "void",
                    "cl_svm_mem_flags": "cl_mem_flags",
                    "CL_CALLBACK_EnqueueSVMFreeARM_pfn_free_func*": "FreeCallback",
                    "CL_CALLBACK_EnqueueSVMFree_pfn_free_func*": "FreeCallback",
                    "CL_CALLBACK_CreateContext_pfn_notify*": "NotifyCallback",
                    "CL_CALLBACK_CreateContextFromType_pfn_notify*": "NotifyCallback",
                    "CL_CALLBACK_SetContextDestructorCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetMemObjectDestructorCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetMemObjectDestructorAPPLE_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_CompileProgram_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_LinkProgram_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetProgramReleaseCallback_pfn_notify*": "ObjectNotifyCallback",
                    "CL_CALLBACK_SetEventCallback_pfn_notify*": "EventNotifyCallback",
                    "CL_CALLBACK_EnqueueNativeKernel_user_func*": "UserFunction",
                    "CL_CALLBACK_BuildProgram_pfn_notify*": "ObjectNotifyCallback"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "Vulkan",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/Vulkan-Docs/main/xml/vk.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "vulkan",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "Vk"
            },
            "prefix": "vk",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "vulkan"
                ]
            },
            "exclude": [
                "VkAabbPositionsKHR",
                "VkAabbPositionsNV",
                "// The below types are part of VK_ANDROID_native_buffer which is an Android internal extension (not user facing)",
                "VkNativeBufferANDROID",
                "VkSwapchainImageCreateInfoANDROID",
                "VkPhysicalDevicePresentationPropertiesANDROID"
            ],
            "output": {
                "mode": "Default",
                "path": "src/Vulkan",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "inject": [
                    {
                        "functions": [
                            "vkCreateInstance"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentInstance = *%$PARAM(pInstance)$%; }"
                    },
                    {
                        "functions": [
                            "vkCreateDevice"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentDevice = *%$PARAM(pDevice)$%; }"
                    }
                ]
            },
            "namespace": "Silk.NET.Vulkan",
            "extensionsNamespace": "Silk.NET.Vulkan.Extensions",
            "nameContainer": {
                "linux-x64": "libvulkan.so.1",
                "win-x64": "vulkan-1.dll",
                "win-x86": "vulkan-1.dll",
                "osx-x64": "libMoltenVK.dylib",
                "android": "libvulkan.so",
                "iOS": "__Internal",
                "className": "VulkanLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "PFN_vkInternalAllocationNotification": "PfnInternalAllocationNotification",
                    "PFN_vkInternalFreeNotification": "PfnInternalFreeNotification",
                    "PFN_vkReallocationFunction": "PfnReallocationFunction",
                    "PFN_vkAllocationFunction": "PfnAllocationFunction",
                    "PFN_vkFreeFunction": "PfnFreeFunction",
                    "PFN_vkVoidFunction": "PfnVoidFunction",
                    "PFN_vkDebugReportCallbackEXT": "PfnDebugReportCallbackEXT",
                    "PFN_vkDebugUtilsMessengerCallbackEXT": "PfnDebugUtilsMessengerCallbackEXT",
                    "PFN_vkDeviceMemoryReportCallbackEXT": "PfnDeviceMemoryReportCallbackEXT",
                    "PFN_vkGetInstanceProcAddr": "PfnVoidFunction",
                    "PFN_vkGetInstanceProcAddrLUNARG": "PfnVoidFunction",
                    "PFN_vkFaultCallbackFunction": "PfnFaultCallbackFunction",
                    "char": "byte",
                    "Window": "nint",
                    "VkAabbPositionsKHR": "Silk.NET.Maths.Box3D<float>",
                    "VkAabbPositionsNV": "Silk.NET.Maths.Box3D<float>"
                },
                {
                    "StdVideoDecodeH264PictureInfo": "Video.StdVideoDecodeH264PictureInfo",
                    "StdVideoDecodeH264PictureInfoFlags": "Video.StdVideoDecodeH264PictureInfoFlags",
                    "StdVideoDecodeH264ReferenceInfo": "Video.StdVideoDecodeH264ReferenceInfo",
                    "StdVideoDecodeH264ReferenceInfoFlags": "Video.StdVideoDecodeH264ReferenceInfoFlags",
                    "StdVideoDecodeH265PictureInfo": "Video.StdVideoDecodeH265PictureInfo",
                    "StdVideoDecodeH265PictureInfoFlags": "Video.StdVideoDecodeH265PictureInfoFlags",
                    "StdVideoDecodeH265ReferenceInfo": "Video.StdVideoDecodeH265ReferenceInfo",
                    "StdVideoDecodeH265ReferenceInfoFlags": "Video.StdVideoDecodeH265ReferenceInfoFlags",
                    "StdVideoEncodeH264PictureInfo": "Video.StdVideoEncodeH264PictureInfo",
                    "StdVideoEncodeH264PictureInfoFlags": "Video.StdVideoEncodeH264PictureInfoFlags",
                    "StdVideoEncodeH264ReferenceInfo": "Video.StdVideoEncodeH264ReferenceInfo",
                    "StdVideoEncodeH264ReferenceInfoFlags": "Video.StdVideoEncodeH264ReferenceInfoFlags",
                    "StdVideoEncodeH264ReferenceListsInfo": "Video.StdVideoEncodeH264ReferenceListsInfo",
                    "StdVideoEncodeH264ReferenceListsInfoFlags": "Video.StdVideoEncodeH264ReferenceListsInfoFlags",
                    "StdVideoEncodeH264RefListModEntry": "Video.StdVideoEncodeH264RefListModEntry",
                    "StdVideoEncodeH264RefPicMarkingEntry": "Video.StdVideoEncodeH264RefPicMarkingEntry",
                    "StdVideoEncodeH264SliceHeader": "Video.StdVideoEncodeH264SliceHeader",
                    "StdVideoEncodeH264SliceHeaderFlags": "Video.StdVideoEncodeH264SliceHeaderFlags",
                    "StdVideoEncodeH264WeightTable": "Video.StdVideoEncodeH264WeightTable",
                    "StdVideoEncodeH264WeightTableFlags": "Video.StdVideoEncodeH264WeightTableFlags",
                    "StdVideoEncodeH265PictureInfo": "Video.StdVideoEncodeH265PictureInfo",
                    "StdVideoEncodeH265PictureInfoFlags": "Video.StdVideoEncodeH265PictureInfoFlags",
                    "StdVideoEncodeH265ReferenceInfo": "Video.StdVideoEncodeH265ReferenceInfo",
                    "StdVideoEncodeH265ReferenceInfoFlags": "Video.StdVideoEncodeH265ReferenceInfoFlags",
                    "StdVideoEncodeH265ReferenceListsInfo": "Video.StdVideoEncodeH265ReferenceListsInfo",
                    "StdVideoEncodeH265ReferenceListsInfoFlags": "Video.StdVideoEncodeH265ReferenceListsInfoFlags",
                    "StdVideoEncodeH265SliceSegmentHeader": "Video.StdVideoEncodeH265SliceSegmentHeader",
                    "StdVideoEncodeH265SliceSegmentHeaderFlags": "Video.StdVideoEncodeH265SliceSegmentHeaderFlags",
                    "StdVideoEncodeH265SliceSegmentLongTermRefPics": "Video.StdVideoEncodeH265SliceSegmentLongTermRefPics",
                    "StdVideoEncodeH265WeightTable": "Video.StdVideoEncodeH265WeightTable",
                    "StdVideoEncodeH265WeightTableFlags": "Video.StdVideoEncodeH265WeightTableFlags",
                    "StdVideoH264HrdParameters": "Video.StdVideoH264HrdParameters",
                    "StdVideoH264PictureParameterSet": "Video.StdVideoH264PictureParameterSet",
                    "StdVideoH264PpsFlags": "Video.StdVideoH264PpsFlags",
                    "StdVideoH264ScalingLists": "Video.StdVideoH264ScalingLists",
                    "StdVideoH264SequenceParameterSet": "Video.StdVideoH264SequenceParameterSet",
                    "StdVideoH264SequenceParameterSetVui": "Video.StdVideoH264SequenceParameterSetVui",
                    "StdVideoH264SpsFlags": "Video.StdVideoH264SpsFlags",
                    "StdVideoH264SpsVuiFlags": "Video.StdVideoH264SpsVuiFlags",
                    "StdVideoH265DecPicBufMgr": "Video.StdVideoH265DecPicBufMgr",
                    "StdVideoH265HrdFlags": "Video.StdVideoH265HrdFlags",
                    "StdVideoH265HrdParameters": "Video.StdVideoH265HrdParameters",
                    "StdVideoH265LongTermRefPicsSps": "Video.StdVideoH265LongTermRefPicsSps",
                    "StdVideoH265PictureParameterSet": "Video.StdVideoH265PictureParameterSet",
                    "StdVideoH265PpsFlags": "Video.StdVideoH265PpsFlags",
                    "StdVideoH265PredictorPaletteEntries": "Video.StdVideoH265PredictorPaletteEntries",
                    "StdVideoH265ProfileTierLevel": "Video.StdVideoH265ProfileTierLevel",
                    "StdVideoH265ProfileTierLevelFlags": "Video.StdVideoH265ProfileTierLevelFlags",
                    "StdVideoH265ScalingLists": "Video.StdVideoH265ScalingLists",
                    "StdVideoH265SequenceParameterSet": "Video.StdVideoH265SequenceParameterSet",
                    "StdVideoH265SequenceParameterSetVui": "Video.StdVideoH265SequenceParameterSetVui",
                    "StdVideoH265ShortTermRefPicSet": "Video.StdVideoH265ShortTermRefPicSet",
                    "StdVideoH265ShortTermRefPicSetFlags": "Video.StdVideoH265ShortTermRefPicSetFlags",
                    "StdVideoH265SpsFlags": "Video.StdVideoH265SpsFlags",
                    "StdVideoH265SpsVuiFlags": "Video.StdVideoH265SpsVuiFlags",
                    "StdVideoH265SubLayerHrdParameters": "Video.StdVideoH265SubLayerHrdParameters",
                    "StdVideoH265VideoParameterSet": "Video.StdVideoH265VideoParameterSet",
                    "StdVideoH265VpsFlags": "Video.StdVideoH265VpsFlags",
                    "StdVideoDecodeH264FieldOrderCount": "Video.StdVideoDecodeH264FieldOrderCount",
                    "StdVideoH264AspectRatioIdc": "Video.StdVideoH264AspectRatioIdc",
                    "StdVideoH264CabacInitIdc": "Video.StdVideoH264CabacInitIdc",
                    "StdVideoH264ChromaFormatIdc": "Video.StdVideoH264ChromaFormatIdc",
                    "StdVideoH264DisableDeblockingFilterIdc": "Video.StdVideoH264DisableDeblockingFilterIdc",
                    "StdVideoH264LevelIdc": "Video.StdVideoH264LevelIdc",
                    "StdVideoH264MemMgmtControlOp": "Video.StdVideoH264MemMgmtControlOp",
                    "StdVideoH264ModificationOfPicNumsIdc": "Video.StdVideoH264ModificationOfPicNumsIdc",
                    "StdVideoH264NonVclNaluType": "Video.StdVideoH264NonVclNaluType",
                    "StdVideoH264PictureType": "Video.StdVideoH264PictureType",
                    "StdVideoH264PocType": "Video.StdVideoH264PocType",
                    "StdVideoH264ProfileIdc": "Video.StdVideoH264ProfileIdc",
                    "StdVideoH264SliceType": "Video.StdVideoH264SliceType",
                    "StdVideoH264WeightedBipredIdc": "Video.StdVideoH264WeightedBipredIdc",
                    "StdVideoH265AspectRatioIdc": "Video.StdVideoH265AspectRatioIdc",
                    "StdVideoH265ChromaFormatIdc": "Video.StdVideoH265ChromaFormatIdc",
                    "StdVideoH265LevelIdc": "Video.StdVideoH265LevelIdc",
                    "StdVideoH265PictureType": "Video.StdVideoH265PictureType",
                    "StdVideoH265ProfileIdc": "Video.StdVideoH265ProfileIdc",
                    "StdVideoH265SliceType": "Video.StdVideoH265SliceType"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        },
        {
            "profileName": "VulkanVideo",
            "sources": [
                "src/Vulkan/vk_video.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "vulkan_video",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "no-extra-dir",
                "no-name-container"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/Vulkan-Headers/include"
                ],
                "traverse": [
                    "build/submodules/Vulkan-Headers/include/vk_video/*.h"
                ],
                "classes": {
                    "vk_video.h": "[Core]VkVideo"
                }
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "vk_video"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Vulkan/Silk.NET.Vulkan/Video",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Vulkan.Video",
            "extensionsNamespace": "Silk.NET.Vulkan.Video.Extensions",
            "typeMaps": [
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Assimp",
            "sources": [
                "src/Assimp/Include/assimp.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "assimp",
            "controlDescriptors": [
                "convert-windows-only",
                "BUG: The descriptor below is because MSVC is currently invalid.",
                "     The combination of convert-windows-only and convert-macos-only means that it will never convert",
                "     Remove this once 16.9 Preview 2 has released."
            ],
            "converter": {},
            "prefix": "ai",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/Assimp/include",
                    "-Isrc/Assimp/Include"
                ],
                "traverse": [
                    "build/submodules/Assimp/include/assimp/cexport.h",
                    "build/submodules/Assimp/include/assimp/cfileio.h",
                    "build/submodules/Assimp/include/assimp/cimport.h",
                    "build/submodules/Assimp/include/assimp/types.h",
                    "build/submodules/Assimp/include/assimp/importerdesc.h",
                    "build/submodules/Assimp/include/assimp/material.h",
                    "build/submodules/Assimp/include/assimp/version.h",
                    "build/submodules/Assimp/include/assimp/texture.h",
                    "build/submodules/Assimp/include/assimp/mesh.h",
                    "build/submodules/Assimp/include/assimp/light.h",
                    "build/submodules/Assimp/include/assimp/camera.h",
                    "build/submodules/Assimp/include/assimp/anim.h",
                    "build/submodules/Assimp/include/assimp/metadata.h",
                    "build/submodules/Assimp/include/assimp/scene.h",
                    "build/submodules/Assimp/include/assimp/aabb.h"
                ],
                "classes": {
                    "assimp.h": "[Core]Assimp"
                }
            },
            "exclude": [
                "aiColor3D",
                "ai_real",
                "_AI_ENFORCE_ENUM_SIZE",
                "_aiAnimBehaviour_Force32Bit",
                "_aiBlendMode_Force32Bit",
                "_AI_DLS_ENFORCE_ENUM_SIZE",
                "_aiLightSource_Force32Bit",
                "FORCE_32BIT",
                "_aiMorphingMethod_Force32Bit",
                "_AI_ORIGIN_ENFORCE_ENUM_SIZE",
                "_aiPrimitiveType_Force32Bit",
                "_aiPTI_Force32Bit",
                "_aiShadingMode_Force32Bit",
                "_aiTextureFlags_Force32Bit",
                "_aiTextureMapMode_Force32Bit",
                "_aiTextureMapping_Force32Bit",
                "_aiTextureOp_Force32Bit",
                "_aiTextureType_Force32Bit",
                "aiAABB",
                "aiMatrix3x3"
            ],
            "rename": {
                "aiString": "AssimpString"
            },
            "bakery": {
                "profileNames": [
                    "assimp"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Assimp",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Assimp",
            "extensionsNamespace": "Silk.NET.Assimp.Extensions",
            "nameContainer": {
                "linux-x64": "libassimp.so.5",
                "win-x64": "Assimp64.dll",
                "win-x86": "Assimp32.dll",
                "osx-x64": "libassimp.5.dylib",
                "android": "libassimp.so.5",
                "iOS": "__Internal",
                "className": "AssimpLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "aiVector3D": "System.Numerics.Vector3",
                    "aiColor4D": "System.Numerics.Vector4",
                    "aiColor3D": "System.Numerics.Vector3",
                    "aiVector2D": "System.Numerics.Vector2",
                    "aiQuaternion": "AssimpQuaternion",
                    "aiMatrix4x4": "System.Numerics.Matrix4x4",
                    "aiMatrix3x3": "Silk.NET.Maths.Matrix3X3<float>",
                    "aiAABB": "Silk.NET.Maths.Box3D<float>",
                    "ai_real": "float"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "OpenXR",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenXR-SDK-Source/main/specification/registry/xr.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "openxr",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "vk",
                "constructor": "vk",
                "className": "XR"
            },
            "prefix": "xr",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "openxr"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenXR",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "inject": [
                    {
                        "functions": [
                            "xrCreateInstance"
                        ],
                        "stage": "end",
                        "code": "if (%$RESULT$% == Result.Success) { CurrentInstance = *%$PARAM(instance)$%; }"
                    }
                ]
            },
            "namespace": "Silk.NET.OpenXR",
            "extensionsNamespace": "Silk.NET.OpenXR.Extensions",
            "nameContainer": {
                "linux-x64": "libopenxr_loader.so.1",
                "win-x64": "openxr_loader.dll",
                "win-x86": "openxr_loader.dll",
                "osx-x64": "null",
                "android": "libopenxr_loader.so.1",
                "iOS": "__Internal",
                "className": "OpenXRLibraryNameContainer"
            },
            "exclude": [
                "XrUuidMSFT",
                "XrSceneSphereBoundMSFT",
                "XrVector4sFB"
            ],
            "typeMaps": [
                {
                    "$typemapPrecedesInjections": "true",
                    "char": "byte",
                    "XR_DEFINE_ATOM": "uint64_t",
                    "LUID": "ulong",
                    "D3D_FEATURE_LEVEL": "uint",
                    "VkInstance": "Silk.NET.Core.Native.VkHandle",
                    "VkPhysicalDevice": "Silk.NET.Core.Native.VkHandle",
                    "VkImage": "ulong",
                    "VkDevice": "Silk.NET.Core.Native.VkHandle",
                    "_comment_0": "Dunno, should we give vkGetInstanceProcAddr its own pfn & delegate?",
                    "PFN_vkGetInstanceProcAddr": "PfnVoidFunction",
                    "PFN_vkGetInstanceProcAddrLUNARG": "PfnVoidFunction",
                    "VkInstanceCreateInfo*": "void*",
                    "VkAllocationCallbacks*": "void*",
                    "VkDeviceCreateInfo*": "void*",
                    "VkResult": "uint",
                    "PFN_xrVoidFunction": "PfnVoidFunction",
                    "PFN_xrDebugUtilsMessengerCallbackEXT": "PfnDebugUtilsMessengerCallbackEXT",
                    "_comment_1": "Dunno, should we give eglGetProcAddress its own pfn & delegate?",
                    "PFNEGLGETPROCADDRESSPROC": "PfnVoidFunction",
                    "ID3D11Buffer*": "void*",
                    "ID3D11Texture2D*": "void*",
                    "ID3D11Texture3D*": "void*",
                    "ID3D11Device*": "void*",
                    "ID3D12Device*": "void*",
                    "ID3D12Resource*": "void*",
                    "ID3D12CommandQueue*": "void*",
                    "IUnknown*": "Silk.NET.Core.Native.IUnknown*",
                    "EGLDisplay": "nint",
                    "EGLConfig": "nint",
                    "EGLContext": "nint",
                    "GLXFBConfig": "nint",
                    "VkFormat": "uint",
                    "EGLenum": "uint",
                    "XrUuidMSFT": "Guid",
                    "XrSceneSphereBoundMSFT": "Silk.NET.Maths.Sphere<float>",
                    "VkSamplerMipmapMode": "uint",
                    "VkComponentSwizzle": "uint",
                    "VkSamplerAddressMode": "uint",
                    "VkFilter": "uint",
                    "XrVector4sFB": "Silk.NET.Maths.Vector4D<short>",
                    "VkImageCreateFlags": "uint",
                    "VkImageUsageFlags": "uint"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json",
                    "XR_DEFINE_ATOM": "uint64_t",
                    "char": "byte"
                }
            ]
        },
        {
            "profileName": "SDL",
            "sources": [
                "build/submodules/SDL/include/SDL.h",
                "build/submodules/SDL/include/SDL_vulkan.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "sdl",
            "controlDescriptors": [
                "convert-windows-only"
            ],
            "converter": {},
            "prefix": "sdl",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/SDL/include",
                    "-D__IPHONEOS__",
                    "-D__ANDROID__",
                    "-D__WIN32__",
                    "-D__WINRT__",
                    "-D__LINUX__"
                ],
                "traverse": [
                    "!build/submodules/SDL/include/SDL_rwops.h",
                    "build/submodules/SDL/include/*.h"
                ],
                "classes": {
                    "SDL.h": "[Core]Sdl",
                    "SDL_vulkan.h": "[Core]Sdl"
                }
            },
            "exclude": [
                "VkSurfaceKHR",
                "VkInstance",
                "ID3D11Device",
                "SDL_main",
                "SDL_SysWMmsg",
                "SDL_Rect",
                "ID3D12Device"
            ],
            "rename": {
                "__AnonymousEnum_SDL_shape_L85_C9": "WindowShapeModeVal",
                "SDL_bool": "SdlBool",
                "_comment_0": "Remove this in 3.0, use native names",
                "__AnonymousRecord_SDL_gamecontroller_L87_C5": "GameControllerBindValue",
                "__AnonymousRecord_SDL_gamecontroller_L91_C9": "GameControllerHatValue",
                "_SDL_Haptic": "Haptic",
                "_SDL_GameController": "GameController",
                "_SDL_Joystick": "Joystick",
                "_SDL_AudioStream": "AudioStream",
                "_SDL_iconv_t": "Icon",
                "_SDL_Sensor": "Sensor"
            },
            "bakery": {
                "profileNames": [
                    "SDL",
                    "SDL_vulkan"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Windowing",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props",
                "conditional": {
                    "$override(0)": [
                        "SDL_Android.*",
                        "SDL_Direct3D9.*",
                        "SDL_DXGI.*",
                        "SDL_GetAndroidSDKVersion",
                        "SDL_IsAndroidTV",
                        "SDL_IsChromebook",
                        "SDL_IsDeXMode",
                        "SDL_RegisterApp",
                        "SDL_RenderGetD3D9Device",
                        "SDL_SetWindowsMessageHook",
                        "SDL_UnregisterApp",
                        "SDL_WinRT.*",
                        "__debugbreak"
                    ]
                }
            },
            "namespace": "Silk.NET.SDL",
            "extensionsNamespace": "Silk.NET.SDL.Extensions",
            "nameContainer": {
                "linux-x64": "libSDL2-2.0.so",
                "win-x64": "SDL2.dll",
                "win-x86": "SDL2.dll",
                "osx-x64": "libSDL2-2.0.dylib",
                "android": "libSDL2.so",
                "iOS": "__Internal",
                "className": "SDLLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$typemapPrecedesInjections": "true",
                    "WindowShapeMode": "WindowShapeModeVal",
                    "SDL_RWops": "RWops",
                    "VkInstance": "Silk.NET.Core.Native.VkHandle",
                    "VkSurfaceKHR": "Silk.NET.Core.Native.VkNonDispatchableHandle",
                    "SDL_SysWMmsg": "SysWMMsg",
                    "SDL_Rect": "Silk.NET.Maths.Rectangle<int>",
                    "SDL_bool": "SdlBool",
                    "ID3D11Device": "Silk.NET.Core.Native.IUnknown",
                    "ID3D12Device": "Silk.NET.Core.Native.IUnknown"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Core",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3dcommon.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "core",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "no-extra-dir",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                ],
                "classes": {
                    "d3dcommon.h": "[Core]D3DCommon"
                }
            },
            "exclude": [
            ],
            "rename": {
                "_D3D_CBUFFER_TYPE": "D3DCBufferType",
                "_D3D_SHADER_CBUFFER_FLAGS": "D3DShaderCBufferFlags"
            },
            "bakery": {
                "profileNames": [
                    "d3dcommon",
                    "silk.net.core.native.dcommon"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Core/Silk.NET.Core/Native",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Core.Native",
            "extensionsNamespace": "Silk.NET.Core.Native",
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "Win32Extras",
            "sources": [
                "src/Core/Silk.NET.Core/win32extras.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "win32extras",
            "controlDescriptors": [
                "convert-windows-only",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/rpcdcep.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/WTypesbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/evntrace.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/minwinbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/timezoneapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/winnt.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/handleapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/fileapi.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/objidlbase.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/evntprov.h"
                ],
                "classes": {
                    "win32extras.h": "[Core]Windows"
                }
            },
            "exclude": [
                "_SECURITY_ATTRIBUTES"
            ],
            "rename": {
                "ETW_COMPRESSION_RESUMPTION_MODE": "EtwCompressionResumptionMode"
            },
            "bakery": {
                "profileNames": [
                    "win32extras"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Core",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Core.Win32Extras",
            "extensionsNamespace": "Silk.NET.Core.Win32Extras",
            "typeMaps": [
                {
                    "WMIDPREQUESTCODE": "Wmidprequestcode",
                    "_SECURITY_ATTRIBUTES": "Silk.NET.Core.Native.SecurityAttributes",
                    "_FILETIME": "Filetime",
                    "_TIME_ZONE_INFORMATION": "TimeZoneInformation",
                    "_WNODE_HEADER": "WnodeHeader",
                    "_EXCEPTION_RECORD": "ExceptionRecord",
                    "_FILE_SEGMENT_ELEMENT": "FileSegmentElement",
                    "_RPC_MESSAGE": "RPCMessage"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXGI",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_4.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_5.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgi1_6.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dxgidebug.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgiformat.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxgi",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DXGI",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgicommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dxgitype.h"
                ],
                "classes": {
                    "dxgi.h": "[Core]DXGI",
                    "dxgi1_2.h": "[Core]DXGI",
                    "dxgi1_3.h": "[Core]DXGI",
                    "dxgi1_4.h": "[Core]DXGI",
                    "dxgi1_5.h": "[Core]DXGI",
                    "dxgi1_6.h": "[Core]DXGI",
                    "dxgidebug.h": "[Core]DXGI",
                    "dxgiformat.h": "[Core]DXGI"
                },
                "comRefs": [
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "dxgi",
                    "dxgi1_2",
                    "dxgi1_3",
                    "dxgi1_4",
                    "dxgi1_5",
                    "dxgi1_6",
                    "dxgidebug",
                    "dxgiformat"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DXGI",
            "extensionsNamespace": "Silk.NET.DXGI.Extensions",
            "nameContainer": {
                "linux-x64": "libDXGI.so",
                "win-x64": "DXGI.dll",
                "win-x86": "DXGI.dll",
                "osx-x64": "libDXGI.dylib",
                "android": "libDXGI.so",
                "iOS": "__Internal",
                "className": "DXGILibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXVA",
            "sources": [
                "src/Microsoft/dxva.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxva",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DXVA",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2api.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2swdev.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva2trace.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxva9typ.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxvahd.h"
                ],
                "classes": {
                    "dxva.h": "[Core]DXVA",
                    "dxva2api.h": "[Core]DXVA",
                    "dxva2swdev.h": "[Core]DXVA",
                    "dxva2trace.h": "[Core]DXVA",
                    "dxva9typ.h": "[Core]DXVA",
                    "dxvahd.h": "[Core]DXVA"
                }
            },
            "exclude": [
            ],
            "rename": {
                "_DXVA2_VIDEOSAMPLE": "DXVA2VideoSample"
            },
            "bakery": {
                "profileNames": [
                    "dxva",
                    "dxva2api",
                    "dxva2swdev",
                    "dxva2trace",
                    "dxva2typ",
                    "dxvahd"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DXVA",
            "extensionsNamespace": "Silk.NET.DXVA.Extensions",
            "nameContainer": {
                "linux-x64": "libdxva2.so",
                "win-x64": "dxva2.dll",
                "win-x86": "dxva2.dll",
                "osx-x64": "libdxva2.dylib",
                "android": "libdxva2.so",
                "iOS": "__Internal",
                "className": "DXVA2LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDirect3DDevice9Ex": "Silk.NET.Direct3D9.IDirect3DDevice9Ex",
                    "IDirect3DDevice9": "Silk.NET.Direct3D9.IDirect3DDevice9",
                    "IDirect3DSurface9": "Silk.NET.Direct3D9.IDirect3DSurface9",
                    "_D3DFORMAT": "Silk.NET.Direct3D9.Format",
                    "_D3DPOOL": "Silk.NET.Direct3D9.Pool",
                    "_EVENT_TRACE_HEADER": "Silk.NET.Core.Win32Extras.EventTraceHeader"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D2D",
            "sources": [
                "build/include/silk.net.direct2d.dcommon.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_2.h",
                "build/include/silk.net.direct2d.d2d1effects.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effectauthor.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1svg.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effectauthor_1.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d2d",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native",
                "no-obsolete-enum"
            ],
            "converter": {},
            "prefix": "D2D1_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects_1.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effects_2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_1helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_2helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1_3helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2d1effecthelpers.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d2dbasetypes.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/D2DErr.h"
                ],
                "classes": {
                    "silk.net.direct2d.dcommon.h": "[Core]D2D",
                    "d2d1.h": "[Core]D2D",
                    "d2d1_1.h": "[Core]D2D",
                    "d2d1_2.h": "[Core]D2D",
                    "silk.net.direct2d.d2d1effects.h": "[Core]D2D",
                    "d2d1effectauthor.h": "[Core]D2D",
                    "d2d1svg.h": "[Core]D2D",
                    "d2d1_3.h": "[Core]D2D",
                    "d2d1effectauthor_1.h": "[Core]D2D"
                }
            },
            "exclude": [
                "D2D_VECTOR_2F",
                "D2D_VECTOR_3F",
                "D2D_VECTOR_4F",
                "D2D_POINT_2U",
                "D2D_POINT_2F",
                "D2D_POINT_2L",
                "D2D_RECT_F",
                "D2D_RECT_U",
                "D2D_RECT_L",
                "D2D_SIZE_F",
                "D2D_SIZE_U",
                "D2D_MATRIX_3X2_F",
                "D2D_MATRIX_4X3_F",
                "D2D_MATRIX_4X4_F",
                "D2D_MATRIX_5X4_F",
                "D2D1_POINT_2U",
                "D2D1_POINT_2F",
                "D2D1_POINT_2L",
                "D2D1_RECT_F",
                "D2D1_RECT_U",
                "D2D1_RECT_L",
                "D2D1_SIZE_F",
                "D2D1_SIZE_U",
                "D2D1GetGradientMeshInteriorPointsFromCoonsPatch",
                "IDXGISurface"
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "silk.net.direct2d.dcommon",
                    "d2d1",
                    "d2d1_1",
                    "d2d1_2",
                    "silk.net.direct2d.d2d1effects",
                    "d2d1effectauthor",
                    "d2d1svg",
                    "d2d1_3",
                    "d2d1effectauthor_1"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct2D",
            "extensionsNamespace": "Silk.NET.Direct2D.Extensions",
            "nameContainer": {
                "linux-x64": "libd2d1.so",
                "win-x64": "d2d1.dll",
                "win-x86": "d2d1.dll",
                "osx-x64": "libd2d1.dylib",
                "android": "libd2d1.so",
                "iOS": "__Internal",
                "className": "D2DLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDXGISurface": "Silk.NET.DXGI.IDXGISurface"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DirectWrite",
            "sources": [
                "build/include/silk.net.directwrite.dcommon.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_3.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dwrite",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native",
                "no-obsolete-enum"
            ],
            "converter": {},
            "prefix": "DWRITE_",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcommon.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_1.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dwrite_3.h"
                ],
                "classes": {
                    "silk.net.directwrite.dcommon.h": "[Core]DWrite",
                    "dwrite.h": "[Core]DWrite",
                    "dwrite_1.h": "[Core]DWrite",
                    "dwrite_2.h": "[Core]DWrite",
                    "dwrite_3.h": "[Core]DWrite"
                }
            },
            "exclude": [
                "D2D_VECTOR_2F",
                "D2D_VECTOR_3F",
                "D2D_VECTOR_4F",
                "D2D_POINT_2U",
                "D2D_POINT_2F",
                "D2D_POINT_2L",
                "D2D_RECT_F",
                "D2D_RECT_U",
                "D2D_RECT_L",
                "D2D_SIZE_F",
                "D2D_SIZE_U",
                "D2D_MATRIX_3X2_F",
                "D2D_MATRIX_4X3_F",
                "D2D_MATRIX_4X4_F",
                "D2D_MATRIX_5X4_F",
                "D2D1_POINT_2U",
                "D2D1_POINT_2F",
                "D2D1_POINT_2L",
                "D2D1_RECT_F",
                "D2D1_RECT_U",
                "D2D1_RECT_L",
                "D2D1_SIZE_F",
                "D2D1_SIZE_U",
                "D2D1GetGradientMeshInteriorPointsFromCoonsPatch",
                "IDXGISurface",
                "D2D1_ALPHA_MODE",
                "D2D1_PIXEL_FORMAT",
                "ID2D1SimplifiedGeometrySink",
                "_D3DCOLORVALUE"
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "silk.net.directwrite.dcommon",
                    "dwrite",
                    "dwrite_1",
                    "dwrite_2",
                    "dwrite_3"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectWrite",
            "extensionsNamespace": "Silk.NET.DirectWrite.Extensions",
            "overloadExclusions": {
                "RefOverloader": [
                    "GetGlyphs",
                    "GetJustifiedGlyphs",
                    "GetGlyphPlacements",
                    "GetGdiCompatibleGlyphPlacements",
                    "ApplyCharacterSpacing",
                    "GetTextComplexity",
                    "GetJustificationOpportunities",
                    "JustifyGlyphAdvances",
                    "CheckTypographicFeature"
                ]
            },
            "nameContainer": {
                "linux-x64": "libdwrite.so",
                "win-x64": "DWrite.dll",
                "win-x86": "DWrite.dll",
                "osx-x64": "libdwrite.dylib",
                "android": "libdwrite.so",
                "iOS": "__Internal",
                "className": "DWriteLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IDXGISurface": "Silk.NET.DXGI.IDXGISurface",
                    "D2D1_ALPHA_MODE": "Silk.NET.Direct2D.AlphaMode",
                    "D2D1PixelFormat": "Silk.NET.Direct2D.PixelFormat",
                    "ID2D1SimplifiedGeometrySink": "Silk.NET.Direct2D.ID2D1SimplifiedGeometrySink",
                    "_FILETIME": "Silk.NET.Core.Win32Extras.Filetime",
                    "tagLOGFONTW": "void",
                    "tagLOGFONTA": "void",
                    "tagFONTSIGNATURE": "void"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D11",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_1.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_2.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_3.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11_4.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11shader.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11shadertracing.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11sdklayers.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d11on12.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d11",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D11",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                ],
                "classes": {
                    "d3d11.h": "[Core]D3D11",
                    "d3d11_1.h": "[Core]D3D11",
                    "d3d11_2.h": "[Core]D3D11",
                    "d3d11_3.h": "[Core]D3D11",
                    "d3d11_4.h": "[Core]D3D11",
                    "d3d11shader.h": "[Core]D3D11",
                    "d3d11shadertracing.h": "[Core]D3D11",
                    "d3d11sdklayers.h": "[Core]D3D11",
                    "d3d11on12.h": "[D3D11On12:D3D11]D3D11On12"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "ID3D10Blob"
            ],
            "rename": {
                "D3D11_OMAC": "OMAC"
            },
            "bakery": {
                "profileNames": [
                    "d3d11",
                    "d3d11_1",
                    "d3d11_2",
                    "d3d11_3",
                    "d3d11_4",
                    "d3d11shader",
                    "d3d11shadertracing",
                    "d3d11sdklayers",
                    "d3d11on12"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D11",
            "extensionsNamespace": "Silk.NET.Direct3D11.Extensions",
            "nameContainer": {
                "linux-x64": "libd3d11.so",
                "win-x64": "d3d11.dll",
                "win-x86": "d3d11.dll",
                "osx-x64": "libd3d11.dylib",
                "android": "libd3d11.so",
                "iOS": "__Internal",
                "className": "D3D11LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "D3D11_AUTHENTICATED_PROTECTION_FLAGS::__MIDL___MIDL_itf_d3d11_0000_0034_0001": "MIDLMIDLItfD3d11000000340001",
                    "ID3D10Blob": "Silk.NET.Core.Native.ID3D10Blob",
                    "D3D12_RESOURCE_STATES": "Silk.NET.Direct3D12.ResourceStates",
                    "ID3D12Fence": "Silk.NET.Direct3D12.ID3D12Fence",
                    "ID3D12CommandQueue": "Silk.NET.Direct3D12.ID3D12CommandQueue"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D12",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12shader.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12video.h",
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d12sdklayers.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d12",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D12",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                ],
                "classes": {
                    "d3d12.h": "[Core]D3D12",
                    "d3d12shader.h": "[Core]D3D12",
                    "d3d12video.h": "[Core]D3D12",
                    "d3d12sdklayers.h": "[Core]D3D12"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "D3D12_RAYTRACING_AABB"
            ],
            "rename": {
                "D3D12_NODE_MASK": "D3D12NodeMask"
            },
            "bakery": {
                "profileNames": [
                    "d3d12",
                    "d3d12shader",
                    "d3d12video",
                    "d3d12sdklayers"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D12",
            "extensionsNamespace": "Silk.NET.Direct3D12.Extensions",
            "nameContainer": {
                "linux-x64": "libD3D12.so",
                "win-x64": "D3D12.dll",
                "win-x86": "D3D12.dll",
                "osx-x64": "libD3D12.dylib",
                "android": "libD3D12.so",
                "iOS": "__Internal",
                "className": "D3D12LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3D9",
            "sources": [
                "src/Microsoft/Silk.NET.Direct3D9/D3D9.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3d9",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "D3D",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/d3d9helper.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9caps.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/d3d9types.h"
                ],
                "classes": {
                    "D3D9.h": "[Core]D3D9"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
                "__AnonymousRecord_d3d9types_L93_C9",
                "__AnonymousRecord_d3d9types_L92_C5",
                "_D3DMATRIX",
                "_D3DCOLORVALUE"
            ],
            "rename": {
                "_D3D_OMAC": "D3DOMac"
            },
            "bakery": {
                "profileNames": [
                    "D3D9"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D9",
            "extensionsNamespace": "Silk.NET.Direct3D9.Extensions",
            "nameContainer": {
                "linux-x64": "libd3d9.so",
                "win-x64": "d3d9.dll",
                "win-x86": "d3d9.dll",
                "osx-x64": "libd3d9.dylib",
                "android": "libd3d9.so",
                "iOS": "__Internal",
                "className": "D3D9LibraryNameContainer"
            },
            "typeMaps": [
                {
                    "_RGNDATA": "RGNData",
                    "_D3DMATRIX": "System.Numerics.Matrix4x4"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DXC",
            "sources": [
                "src/Microsoft/Silk.NET.Direct3D.Compilers/DXC.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dxc",
            "controlDescriptors": [
                "convert-windows-only",
                "no-csproj",
                "typemap-native",
                "COMMENT: the below is needed because D3DCompiler and Dxc are in the same project and will fight eachother otherwise",
                "keep-unknown-gen-files"
            ],
            "prefix": "Dxc",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dxcapi.h"
                ],
                "classes": {
                    "DXC.h": "[Core]DXC"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "DXC"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D.Compilers",
            "extensionsNamespace": "Silk.NET.Direct3D.Compilers.Extensions",
            "nameContainer": {
                "linux-x64": "libdxcompiler.so",
                "win-x64": "dxcompiler.dll",
                "win-x86": "dxcompiler.dll",
                "osx-x64": "libdxcompiler.dylib",
                "android": "libdxcompiler.so",
                "iOS": "__Internal",
                "className": "DXCLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "IStream": "void"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "D3DCompiler",
            "sources": [
                "$windowsSdkDir/Include/$windowsSdkVersion/um/d3dcompiler.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "d3dcompiler",
            "controlDescriptors": [
                "convert-windows-only",
                "COMMENT: the below is needed because D3DCompiler and Dxc are in the same project and will fight eachother otherwise",
                "keep-unknown-gen-files",
                "typemap-native"
            ],
            "prefix": "D3D",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                ],
                "classes": {
                    "d3dcompiler.h": "[Core]D3DCompiler"
                },
                "comRefs": [
                    "Silk.NET.DXGI.IDXGIAdapter",
                    "Silk.NET.DXGI.IDXGISwapChain",
                    "Silk.NET.Core.Native.ID3D10Blob",
                    "Silk.NET.Core.Native.ID3DDestructionNotifier",
                    "Silk.NET.Core.Native.ID3DInclude"
                ]
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "d3dcompiler"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.Direct3D.Compilers",
            "extensionsNamespace": "Silk.NET.Direct3D.Compilers.Extensions",
            "nameContainer": {
                "linux-x64": "libD3DCompiler_47.so",
                "win-x64": "D3DCompiler_47.dll",
                "win-x86": "D3DCompiler_47.dll",
                "osx-x64": "libD3DCompiler_47.dylib",
                "android": "libD3DCompiler_47.so",
                "iOS": "__Internal",
                "className": "D3DCompilerLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID3D11Module": "void",
                    "ID3D11Linker": "void",
                    "ID3D11FunctionLinkingGraph": "void",
                    "IStream": "Silk.NET.Core.Native.IStream"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "DirectStorage",
            "sources": [
                "src/Microsoft/Silk.NET.DirectStorage/silk.net.directstorage.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dstorage",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "prefix": "DStorage",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-I$nuget/Microsoft.Direct3D.DirectStorage/*/Include/DirectStorage",
                    "-I$nuget/Microsoft.Direct3D.DirectStorage/*/native/include"
                ],
                "traverse": [
                    "$nuget/Microsoft.Direct3D.DirectStorage/*/Include/DirectStorage/*.h",
                    "$nuget/Microsoft.Direct3D.DirectStorage/*/native/include/*.h"
                ],
                "classes": {
                    "silk.net.directstorage.h": "[Core]DStorage"
                }
            },
            "exclude": [
                "ID3D12Resource",
                "ID3D12Fence"
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "silk.net.directstorage"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectStorage",
            "extensionsNamespace": "Silk.NET.DirectStorage.Extensions",
            "nameContainer": {
                "linux-x64": "libdstorage.so",
                "win-x64": "dstorage.dll",
                "win-x86": "dstorage.dll",
                "osx-x64": "libdstorage.dylib",
                "android": "libdstorage.so",
                "iOS": "__Internal",
                "className": "DStorageLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "ID3D12Resource": "Silk.NET.Direct3D12.ID3D12Resource",
                    "ID3D12Fence": "Silk.NET.Direct3D12.ID3D12Fence",
                    "ID3D12Device": "Silk.NET.Direct3D12.ID3D12Device",
                    "D3D12_TILED_RESOURCE_COORDINATE": "Silk.NET.Direct3D12.TiledResourceCoordinate",
                    "D3D12_TILE_REGION_SIZE": "Silk.NET.Direct3D12.TileRegionSize",
                    "_BY_HANDLE_FILE_INFORMATION": "Silk.NET.Core.Win32Extras.ByHandleFileInformation",
                    "D3D12_BOX": "Silk.NET.Direct3D12.Box"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ],
            "copy": {
                "$nuget/Microsoft.Direct3D.DirectStorage/*/bin/ARM/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-arm/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/bin/ARM64/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-arm64/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/bin/x64/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-x64/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/bin/x86/*.dll": "src/Native/Silk.NET.DirectStorage.Native/runtimes/win-x86/native",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/LICENSE.txt": "src/Native/Silk.NET.DirectStorage.Native/LICENSE.txt",
                "$nuget/Microsoft.Direct3D.DirectStorage/*/$version": "src/Native/Silk.NET.DirectStorage.Native/version.txt"
            }
        },
        {
            "profileName": "DirectComposition",
            "sources": [
                "build/include/silk.net.directcomposition.dcomp.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "dcomp",
            "controlDescriptors": [
                "convert-windows-only",
                "no-obsolete-enum",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "DComposition",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcompanimation.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/shared/dcomptypes.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/dcomp.h"
                ],
                "classes": {
                    "silk.net.directcomposition.dcomp.h": "[Core]DComp"
                }
            },
            "exclude": [
                "D2D_MATRIX_3X2_F",
                "D2D_RECT_F",
                "D2D1_COMPOSITE_MODE",
                "_D3DCOLORVALUE",
                "D3DMATRIX"
            ],
            "rename": {
                "tagCOMPOSITION_FRAME_STATS": "CompositionFrameStats",
                "tagCOMPOSITION_STATS": "CompositionStats",
                "tagCOMPOSITION_TARGET_ID": "CompositionTargetId",
                "tagCOMPOSITION_TARGET_STATS": "CompositionTargetStats"
            },
            "bakery": {
                "profileNames": [
                    "silk.net.directcomposition.dcomp"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.DirectComposition",
            "extensionsNamespace": "Silk.NET.DirectComposition.Extensions",
            "nameContainer": {
                "linux-x64": "libDComp.so",
                "win-x64": "DComp.dll",
                "win-x86": "DComp.dll",
                "osx-x64": "libDComp.dylib",
                "android": "libDComp.so",
                "iOS": "__Internal",
                "className": "DCompLibraryNameContainer"
            },
            "typeMaps": [
                {
                    "D2D_MATRIX_3X2_F": "Silk.NET.Maths.Matrix3X2<float>",
                    "D2D_RECT_F": "Silk.NET.Maths.Rectangle<float>",
                    "D3DMATRIX": "Silk.NET.Maths.Matrix4X4<float>",
                    "DXGI_RATIONAL": "Silk.NET.DXGI.Rational",
                    "DXGI_ALPHA_MODE": "Silk.NET.DXGI.AlphaMode",
                    "DXGI_HDR_METADATA_TYPE": "Silk.NET.DXGI.HdrMetadataType",
                    "D2D1_BORDER_MODE": "Silk.NET.Direct2D.BorderMode",
                    "D2D1_2DAFFINETRANSFORM_INTERPOLATION_MODE": "Silk.NET.Direct2D.D2D12DaffinetransformInterpolationMode",
                    "D2D1_COLORMATRIX_ALPHA_MODE": "Silk.NET.Direct2D.ColormatrixAlphaMode",
                    "D2D1_BLEND_MODE": "Silk.NET.Direct2D.BlendMode",
                    "D2D1_COMPOSITE_MODE": "Silk.NET.Direct2D.CompositeMode",
                    "D2D1_TURBULENCE_NOISE": "Silk.NET.Direct2D.TurbulenceNoise"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "XAudio",
            "_commented_out_sources": [
                "X3DAudio currently can't be parsed due to the same bug that Assimp has.",
                "(intrin.h is invalid for clang, will be fixed in VS 16.9)",
                "build/include/silk.net.xaudio.x3daudio.h"
            ],
            "sources": [
                "build/include/silk.net.xaudio.xaudio2.h",
                "build/include/silk.net.xaudio.xaudio2fx.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "xaudio",
            "controlDescriptors": [
                "convert-windows-only",
                "NOTE we'll handle the loading ourselves as it's a bit quirky here",
                "no-name-container",
                "typemap-native"
            ],
            "prefix": "XAudio2",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/xaudio2fx.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/xaudio2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/x3daudio2.h",
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/AudioSessionTypes.h"
                ],
                "classes": {
                    "silk.net.xaudio.xaudio2.h": "[Core]XAudio",
                    "silk.net.xaudio.xaudio2fx.h": "[Core]XAudioFX",
                    "silk.net.xaudio.x3daudio.h": "[Core]X3DAudio"
                }
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "silk.net.xaudio.xaudio2",
                    "silk.net.xaudio.xaudio2fx",
                    "silk.net.xaudio.x3daudio"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.XAudio",
            "extensionsNamespace": "Silk.NET.XAudio.Extensions",
            "typeMaps": [
                {
                    "tWAVEFORMATEX": "WaveFormatEx"
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "XInput",
            "sources": [
                "build/include/silk.net.xinput.xinput.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "xinput",
            "controlDescriptors": [
                "convert-windows-only",
                "typemap-native"
            ],
            "prefix": "XInput",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m32",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/include"
                ],
                "traverse": [
                    "$windowsSdkDir/Include/$windowsSdkVersion/um/Xinput.h"
                ],
                "classes": {
                    "silk.net.xinput.xinput.h": "[Core]XInput"
                }
            },
            "exclude": [
            ],
            "rename": {
            },
            "bakery": {
                "profileNames": [
                    "silk.net.xinput.xinput"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/Microsoft",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.XInput",
            "extensionsNamespace": "Silk.NET.XInput.Extensions",
            "typeMaps": [
                {
                },
                {
                    "$include.dxTypemap": "build/dx_typemap.json",
                    "$include.commonTypeMap": "build/csharp_typemap.json"
                }
            ]
        },
        {
            "profileName": "webgpu",
            "sources": [
                "build/submodules/webgpu-headers/webgpu.h",
                "build/submodules/wgpu-native/ffi/wgpu.h",
                "build/submodules/dawn/out/Debug/gen/include/dawn/dawn-webgpu.h"
            ],
            "mode": "Clang",
            "cacheDir": "build/cache",
            "cacheKey": "webgpu",
            "controlDescriptors": [
                "convert-windows-only",
                "no-obsolete-enum",
                "typemap-native"
            ],
            "converter": {},
            "prefix": "wgpu",
            "clang": {
                "args": [
                    "--language=c++",
                    "--std=c++17",
                    "-m64",
                    "-Wno-expansion-to-defined",
                    "-Wno-ignored-attributes",
                    "-Wno-ignored-pragma-intrinsic",
                    "-Wno-nonportable-include-path",
                    "-Wno-pragma-pack",
                    "-I$windowsSdkIncludes",
                    "-Ibuild/submodules/wgpu-native/ffi"
                ],
                "traverse": [
                    "build/submodules/webgpu-headers/*.h",
                    "build/submodules/wgpu-native/*.h"
                ],
                "classes": {
                    "webgpu.h": "[Core]WebGPU",
                    "wgpu.h": "[WGPU:WebGPU]Wgpu",
                    "dawn-webgpu.h": "[Dawn:WebGPU]Dawn"
                }
            },
            "exclude": [
            ],
            "rename": {
                "WGPUComputePipelineImpl": "ComputePipeline",
                "WGPUAdapterImpl": "Adapter",
                "WGPUBindGroupImpl": "BindGroup",
                "WGPUBindGroupLayoutImpl": "BindGroupLayout",
                "WGPUBufferImpl": "Buffer",
                "WGPUCommandBufferImpl": "CommandBuffer",
                "WGPUCommandEncoderImpl": "CommandEncoder",
                "WGPUComputePassEncoderImpl": "ComputePassEncoder",
                "WGPUDeviceImpl": "Device",
                "WGPUInstanceImpl": "Instance",
                "WGPUPipelineLayoutImpl": "PipelineLayout",
                "WGPUQuerySetImpl": "QuerySet",
                "WGPUQueueImpl": "Queue",
                "WGPURenderBundleEncoderImpl": "RenderBundleEncoder",
                "WGPURenderBundleImpl": "RenderBundle",
                "WGPURenderPassEncoderImpl": "RenderPassEncoder",
                "WGPURenderPipelineImpl": "RenderPipeline",
                "WGPUSamplerImpl": "Sampler",
                "WGPUShaderModuleImpl": "ShaderModule",
                "WGPUSurfaceImpl": "Surface",
                "WGPUSwapChainImpl": "SwapChain",
                "WGPUTextureImpl": "Texture",
                "WGPUTextureViewImpl": "TextureView"
            },
            "bakery": {
                "profileNames": [
                    "webgpu",
                    "wgpu",
                    "dawn-webgpu"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/WebGPU",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.WebGPU",
            "extensionsNamespace": "Silk.NET.WebGPU.Extensions",
            "nameContainer": {
                "linux-x64": "libwgpu_native.so",
                "win-x64": "libwgpu_native.dll",
                "win-x86": "libwgpu_native.dll",
                "osx-x64": "libwgpu_native.dylib",
                "android": "libwgpu_native.so",
                "className": "WebGPULibraryNameContainer"
            },
            "typeMaps": [
                {
                    "WGPUColorWriteMaskFlags": "Silk.NET.WebGPU.ColorWriteMask",
                    "WGPUBufferUsageFlags": "Silk.NET.WebGPU.BufferUsage",
                    "WGPUMapModeFlags": "Silk.NET.WebGPU.MapMode",
                    "WGPUShaderStageFlags": "Silk.NET.WebGPU.ShaderStage",
                    "WGPUTextureUsageFlags": "Silk.NET.WebGPU.TextureUsage"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.dxTypeMap": "build/dx_typemap.json"
                }
            ]
        },
        {
            "profileName": "WGL",
            "sources": [
                "https://raw.githubusercontent.com/KhronosGroup/OpenGL-Registry/main/xml/wgl.xml"
            ],
            "mode": "ConvertConstruct",
            "cacheDir": "build/cache",
            "cacheKey": "wgl",
            "controlDescriptors": [
                "allow-redefinitions"
            ],
            "converter": {
                "reader": "gl",
                "constructor": "gl",
                "className": "WGL"
            },
            "prefix": "wgl",
            "clang": {},
            "bakery": {
                "profileNames": [
                    "wgl"
                ]
            },
            "output": {
                "mode": "Default",
                "path": "src/OpenGL",
                "licenseFile": "build/LICENSE_HEADER.txt",
                "props": "build/props/bindings.props"
            },
            "namespace": "Silk.NET.WGL",
            "extensionsNamespace": "Silk.NET.WGL.Extensions",
            "typeMaps": [
                {
                    "$include.glTypeMap": "build/gl_typemap.json",
                    "LPGLYPHMETRICSFLOAT": "GlyphMetricsFloat*",
                    "PIXELFORMATDESCRIPTOR": "PixelFormatDescriptor",
                    "LAYERPLANEDESCRIPTOR": "LayerPlaneDescriptor",
                    "HENHMETAFILE": "nint",
                    "unsignedlong": "uint",
                    "HPVIDEODEV": "nint",
                    "HVIDEOOUTPUTDEVICENV": "nint",
                    "HVIDEOINPUTDEVICENV": "nint",
                    "INT": "int",
                    "HGPUNV": "nint",
                    "PGPU_DEVICE": "GpuDevice*",
                    "unsignedint": "uint"
                },
                {
                    "$include.commonTypeMap": "build/csharp_typemap.json",
                    "$include.khronosTypeMap": "build/khronos_typemap.json"
                }
            ]
        }
    ]
}
